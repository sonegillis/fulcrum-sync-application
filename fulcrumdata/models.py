from django.contrib.gis.db import models
from django_mysql.models import JSONField

# Create your models here.


class FulcrumAppToSync(models.Model):
    """
        This table contains information about the different
        fulcrum applications that are to be syncronised with
        the private server

        Attributes
        ----------
        name: the name of the fulcrum app to be synced
        form_id: a unique id used to identify the fulcrum app to be synced
        share_token: a unique id used to access data from fulcrum through datashare
        owner_id: a unique id of the organisation that owns the data for the fulcrum app
    """
    model_name = models.CharField(max_length=100, unique=True)
    form_id = models.CharField(max_length=200, unique=True, primary_key=True)
    share_token = models.CharField(max_length=200, unique=True)
    owner_id = models.CharField(max_length=200, null=True)

    def __str__(self):
        return " ".join(self.model_name.split("_")).capitalize()

class GarlandValve2017(models.Model):
    fulcrum_id = models.CharField(max_length=500, null=True, unique=True)
    status = models.CharField(max_length=100, null=True)
    created_at = models.DateTimeField(default=None, null=True)
    created_by = models.CharField(max_length=500, null=True)
    updated_at = models.DateTimeField(default=None, null=True)
    updated_by = models.CharField(max_length=500, null=True)
    inspector = models.CharField(max_length=500, null=True)
    date = models.DateField(default=None, null=True)
    valve_id = models.CharField(max_length=500, null=True)
    closest_address_seen = models.CharField(max_length=500, null=True)
    valve_size_per_map = models.CharField(max_length=500, null=True)
    turns_to_close = models.FloatField(null=True)
    split_system_valve = models.CharField(max_length=500, null=True)
    split_system_valve_other = models.CharField(max_length=500, null=True)
    valve_type = models.CharField(max_length=500, null=True)
    valve_type_other = models.CharField(max_length=500, null=True)
    was_valve_open_upon_arrival = models.CharField(max_length=500, null=True)
    was_valve_left_open_after_inspection = models.CharField(max_length=500, null=True)
    if_left_closed_why = models.CharField(max_length=500, null=True)
    is_valve_stack_level_and_free_of_obstruction = models.CharField(max_length=500, null=True)
    general_comments = models.CharField(max_length=500, null=True)
    geocodeaddress_full = models.CharField(max_length=500, null=True)
    assessment_photos = models.CharField(max_length=500, null=True)
    assessment_photos_caption = models.CharField(max_length=500, null=True)
    assessment_photos_url = models.CharField(max_length=500, null=True)
    photo_qc_inspector = models.CharField(max_length=100, null=True)
    photo_qc_date_complete = models.CharField(max_length=500, null=True)
    photo_qc_time_complete = models.CharField(max_length=500, null=True)
    photo_qc_review_items = models.CharField(max_length=500, null=True)
    photo_qc_review_items_other = models.CharField(max_length=500, null=True)
    photo_qc_passfail = models.CharField(max_length=500, null=True)
    geometry = models.GeometryField(null=True)
    version = models.BigIntegerField(null=True)
    inspector_other = models.CharField(max_length=500, null=True)
    geocodeaddress_admin_area = models.CharField(max_length=500, null=True)
    gps_horizontal_accuracy = models.FloatField(null=True)
    geocodeaddress_locality = models.CharField(max_length=500, null=True)
    gps_course = models.CharField(max_length=500, null=True)
    system_created_at = models.DateTimeField(default=None, null=True)
    geocodeaddress_postal_code = models.CharField(max_length=500, null=True)
    mappage = models.CharField(max_length=500, null=True)
    geocodeaddress_thoroughfare = models.CharField(max_length=500, null=True)
    gps_vertical_accuracy = models.FloatField(null=True)
    gps_altitude = models.FloatField(null=True)
    system_updated_at = models.DateTimeField(default=None, null=True)
    latitude = models.FloatField(null=True)
    geocodeaddress_country = models.CharField(max_length=500, null=True)
    gps_speed = models.CharField(max_length=500, null=True)
    marker_color = models.CharField(max_length=500, null=True)
    geocodeaddress_suite = models.CharField(max_length=500, null=True)
    project = models.CharField(max_length=500, null=True)
    assigned_to = models.CharField(max_length=500, null=True)
    longitude = models.FloatField(null=True)
    geocodeaddress_sub_admin_area = models.CharField(max_length=500, null=True)
    geocodeaddress_sub_thoroughfare = models.CharField(max_length=500, null=True)
    address = models.BigIntegerField(null=True)

class PalmBeachCountyValveAssessment(models.Model):
    geocodeaddress_sub_thoroughfare = models.CharField(max_length=500, null=True)
    valveid = models.CharField(max_length=500, null=True)
    photo_qc_passfail = models.CharField(max_length=500, null=True)
    photo_qc_time_complete = models.CharField(max_length=500, null=True)
    gps_speed = models.CharField(max_length=500, null=True)
    assigned_to = models.CharField(max_length=500, null=True)
    geocodeaddress_admin_area = models.CharField(max_length=500, null=True)
    version = models.BigIntegerField(null=True)
    marker_color = models.CharField(max_length=500, null=True)
    geocodeaddress_sub_admin_area = models.CharField(max_length=500, null=True)
    system_created_at = models.DateTimeField(default=None, null=True)
    map_page = models.CharField(max_length=500, null=True)
    fopcond = models.CharField(max_length=500, null=True)
    geocodeaddress_country = models.CharField(max_length=500, null=True)
    photo_qc_review_items = models.CharField(max_length=500, null=True)
    system_updated_at = models.DateTimeField(default=None, null=True)
    location_other = models.CharField(max_length=500, null=True)
    gps_course = models.CharField(max_length=500, null=True)
    location = models.CharField(max_length=500, null=True)
    created_by = models.CharField(max_length=500, null=True)
    size = models.CharField(max_length=500, null=True)
    corner = models.CharField(max_length=500, null=True)
    geocodeaddress_suite = models.CharField(max_length=500, null=True)
    size_other = models.CharField(max_length=500, null=True)
    updated_by = models.CharField(max_length=500, null=True)
    photos_url = models.CharField(max_length=500, null=True)
    photo_qc_review_items_other = models.CharField(max_length=500, null=True)
    inspector_other = models.CharField(max_length=500, null=True)
    zone = models.CharField(max_length=500, null=True)
    open_direction = models.CharField(max_length=500, null=True)
    geocodeaddress_postal_code = models.CharField(max_length=500, null=True)
    address = models.BigIntegerField(null=True)
    time = models.CharField(max_length=500, null=True)
    longitude = models.FloatField(null=True)
    inopcond = models.CharField(max_length=500, null=True)
    gps_vertical_accuracy = models.FloatField(null=True)
    inspector = models.CharField(max_length=500, null=True)
    photo_qc_inspector = models.CharField(max_length=500, null=True)
    created_at = models.DateTimeField(default=None, null=True)
    to_be_gps = models.CharField(max_length=500, null=True)
    geocodeaddress_thoroughfare = models.CharField(max_length=500, null=True)
    photo_qc_date_complete = models.DateField(default=None, null=True)
    fulcrum_id = models.CharField(max_length=500, null=True, unique=True)
    status = models.CharField(max_length=500, null=True)
    final_found = models.CharField(max_length=500, null=True)
    geocodeaddress_locality = models.CharField(max_length=500, null=True)
    gps_horizontal_accuracy = models.FloatField(null=True)
    inspect_date = models.DateField(default=None, null=True)
    type = models.CharField(max_length=500, null=True)
    comments = models.CharField(max_length=500, null=True)
    crossstreet = models.CharField(max_length=500, null=True)
    gps_altitude = models.FloatField(null=True)
    photos_caption = models.CharField(max_length=500, null=True)
    facilityid = models.CharField(max_length=500, null=True)
    geocodeaddress_full = models.CharField(max_length=500, null=True)
    turns_to_close = models.FloatField(null=True)
    photos = models.CharField(max_length=500, null=True)
    latitude = models.FloatField(null=True)
    project = models.CharField(max_length=500, null=True)
    street = models.CharField(max_length=500, null=True)
    position_found = models.CharField(max_length=500, null=True)
    updated_at = models.DateTimeField(default=None, null=True)
    geometry = models.GeometryField(null=True)

class GoldenStateWaterValveAssessment(models.Model):
    geocodeaddress_sub_thoroughfare = models.CharField(max_length=500, null=True)
    photo_qc_passfail = models.CharField(max_length=500, null=True)
    photo_qc_time_complete = models.CharField(max_length=500, null=True)
    gps_speed = models.CharField(max_length=500, null=True)
    assigned_to = models.CharField(max_length=500, null=True)
    geocodeaddress_admin_area = models.CharField(max_length=500, null=True)
    version = models.BigIntegerField(null=True)
    marker_color = models.CharField(max_length=500, null=True)
    geocodeaddress_sub_admin_area = models.CharField(max_length=500, null=True)
    system_created_at = models.DateTimeField(default=None, null=True)
    geocodeaddress_country = models.CharField(max_length=500, null=True)
    photo_qc_review_items = models.CharField(max_length=500, null=True)
    system_updated_at = models.DateTimeField(default=None, null=True)
    gps_course = models.CharField(max_length=500, null=True)
    created_by = models.CharField(max_length=500, null=True)
    geocodeaddress_suite = models.CharField(max_length=500, null=True)
    updated_by = models.CharField(max_length=500, null=True)
    photos_url = models.CharField(max_length=500, null=True)
    photo_qc_review_items_other = models.CharField(max_length=500, null=True)
    inspector_other = models.CharField(max_length=500, null=True)
    geocodeaddress_postal_code = models.CharField(max_length=500, null=True)
    address = models.BigIntegerField(null=True)
    longitude = models.FloatField(null=True)
    gps_vertical_accuracy = models.FloatField(null=True)
    inspector = models.CharField(max_length=500, null=True)
    photo_qc_inspector = models.CharField(max_length=500, null=True)
    created_at = models.DateTimeField(default=None, null=True)
    geocodeaddress_thoroughfare = models.CharField(max_length=500, null=True)
    photo_qc_date_complete = models.DateField(default=None, null=True)
    fulcrum_id = models.CharField(max_length=500, null=True, unique=True)
    status = models.CharField(max_length=500, null=True)
    geocodeaddress_locality = models.CharField(max_length=500, null=True)
    gps_horizontal_accuracy = models.FloatField(null=True)
    inspect_date = models.DateField(default=None, null=True)
    comments = models.CharField(max_length=500, null=True)
    gps_altitude = models.FloatField(null=True)
    photos_caption = models.CharField(max_length=500, null=True)
    facilityid = models.CharField(max_length=500, null=True)
    geocodeaddress_full = models.CharField(max_length=500, null=True)
    photos = models.CharField(max_length=500, null=True)
    latitude = models.FloatField(null=True)
    project = models.CharField(max_length=500, null=True)
    position_found = models.CharField(max_length=500, null=True)
    updated_at = models.DateTimeField(default=None, null=True)
    valve_type = models.CharField(max_length=500, null=True)
    normal_valve_position = models.CharField(max_length=500, null=True)
    packing_leak = models.CharField(max_length=500, null=True)
    valve_use = models.CharField(max_length=500, null=True)
    cross_street = models.CharField(max_length=500, null=True)
    final_torque = models.BigIntegerField(null=True)
    operation_method = models.CharField(max_length=500, null=True)
    surface_type = models.CharField(max_length=500, null=True)
    depth_to_nut = models.BigIntegerField(null=True)
    turns = models.BigIntegerField(null=True)
    can_cleaned = models.CharField(max_length=500, null=True)
    final_position = models.CharField(max_length=500, null=True)
    comments_other = models.CharField(max_length=500, null=True)
    system = models.CharField(max_length=500, null=True)
    valve_lid_painted = models.CharField(max_length=500, null=True)
    district = models.CharField(max_length=500, null=True)
    surface_type_other = models.CharField(max_length=500, null=True)
    valve_type_other = models.CharField(max_length=500, null=True)
    valve_size = models.BigIntegerField(null=True)
    max_torque = models.BigIntegerField(null=True)
    valve_id = models.CharField(max_length=500, null=True)
    inspect_time = models.CharField(max_length=500, null=True)
    geometry = models.GeometryField(null=True)
